<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <IsPackable>false</IsPackable>
    <IsTestProject>true</IsTestProject>
  </PropertyGroup>


  <!-- So we create a new Item Group to hold our Project References
       We then, give it a (relative) file path using "Include"  
       FROM the xunit testing project TO the project who's code
       you are trying to write tests for.-->
  <!-- <ItemGroup>
    <ProjectReference Include="..\SimpleMath\SimpleMath.csproj" />
  </ItemGroup> -->

  <!-- This reference was generated by using the dotnet add reference command
    dotnet add ./SimpleMath.Tests/SimpleMath.Tests.csproj reference ./SimpleMath/SimpleMath.csproj
    dotnet add {WHERE THE REFERENCE WILL BE ADDED TO} reference {WHAT WE ARE REFERENCING}

    Whatever is easier for you is perfectly fine. The command simply generates this text for you,
    it doesn't do anything special beyond that. 

    NOTE: We want to avoid creating circular dependencies or referencing things we do not need in general.
    Our xUnit Tests NEED to be able to see the code inside of SimpleMath they are attempting to test.
    Our SimpleMath console app doesn't care about our unit testing code.  
  -->
  <ItemGroup>
    <ProjectReference Include="..\SimpleMath\SimpleMath.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="coverlet.collector" Version="6.0.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.8.0" />
    <PackageReference Include="xunit" Version="2.5.3" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.5.3" />
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  

</Project>
